// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cmd.proto

package com.navercorp.pinpoint.grpc.trace;

/**
 * Protobuf enum {@code v1.PCommandType}
 */
public enum PCommandType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>NONE = 0;</code>
   */
  NONE(0),
  /**
   * <code>PING = 100;</code>
   */
  PING(100),
  /**
   * <code>PONG = 101;</code>
   */
  PONG(101),
  /**
   * <code>ECHO = 710;</code>
   */
  ECHO(710),
  /**
   * <code>ACTIVE_THREAD_COUNT = 730;</code>
   */
  ACTIVE_THREAD_COUNT(730),
  /**
   * <code>ACTIVE_THREAD_DUMP = 740;</code>
   */
  ACTIVE_THREAD_DUMP(740),
  /**
   * <code>ACTIVE_THREAD_LIGHT_DUMP = 750;</code>
   */
  ACTIVE_THREAD_LIGHT_DUMP(750),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>NONE = 0;</code>
   */
  public static final int NONE_VALUE = 0;
  /**
   * <code>PING = 100;</code>
   */
  public static final int PING_VALUE = 100;
  /**
   * <code>PONG = 101;</code>
   */
  public static final int PONG_VALUE = 101;
  /**
   * <code>ECHO = 710;</code>
   */
  public static final int ECHO_VALUE = 710;
  /**
   * <code>ACTIVE_THREAD_COUNT = 730;</code>
   */
  public static final int ACTIVE_THREAD_COUNT_VALUE = 730;
  /**
   * <code>ACTIVE_THREAD_DUMP = 740;</code>
   */
  public static final int ACTIVE_THREAD_DUMP_VALUE = 740;
  /**
   * <code>ACTIVE_THREAD_LIGHT_DUMP = 750;</code>
   */
  public static final int ACTIVE_THREAD_LIGHT_DUMP_VALUE = 750;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static PCommandType valueOf(int value) {
    return forNumber(value);
  }

  public static PCommandType forNumber(int value) {
    switch (value) {
      case 0: return NONE;
      case 100: return PING;
      case 101: return PONG;
      case 710: return ECHO;
      case 730: return ACTIVE_THREAD_COUNT;
      case 740: return ACTIVE_THREAD_DUMP;
      case 750: return ACTIVE_THREAD_LIGHT_DUMP;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<PCommandType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      PCommandType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<PCommandType>() {
          public PCommandType findValueByNumber(int number) {
            return PCommandType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.navercorp.pinpoint.grpc.trace.CmdProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final PCommandType[] VALUES = values();

  public static PCommandType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private PCommandType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:v1.PCommandType)
}

